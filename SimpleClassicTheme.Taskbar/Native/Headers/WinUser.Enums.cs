namespace SimpleClassicTheme.Taskbar.Native.Headers
{
    internal static partial class WinUser
    {
        public enum ShellEvents : int
        {
            /// <summary>
            /// A top-level, unowned window has been created. The window exists when the system calls this hook.
            /// </summary>
            HSHELL_WINDOWCREATED = 1,

            /// <summary>
            /// A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook.
            /// </summary>
            HSHELL_WINDOWDESTROYED = 2,

            /// <summary>
            /// The shell should activate its main window.
            /// </summary>
            HSHELL_ACTIVATESHELLWINDOW = 3,

            /// <summary>
            /// The activation has changed to a different top-level, unowned window.
            /// </summary>
            HSHELL_WINDOWACTIVATED = 4,

            /// <summary>
            /// A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the window.
            /// </summary>
            HSHELL_GETMINRECT = 5,

            /// <summary>
            /// The title of a window in the task bar has been redrawn.
            /// </summary>
            HSHELL_REDRAW = 6,

            /// <summary>
            /// The user has selected the task list. A shell application that provides a task list should return <see cref="true"/> to prevent Windows from starting its task list.
            /// </summary>
            HSHELL_TASKMAN = 7,

            /// <summary>
            /// Keyboard language was changed or a new keyboard layout was loaded.
            /// </summary>
            HSHELL_LANGUAGE = 8,

            /// <summary>
            /// The accessibility state has changed.
            /// </summary>
            HSHELL_ACCESSIBILITYSTATE = 11,

            /// <summary>
            /// The user completed an input event (for example, pressed an application command button on the mouse or an application command key on the keyboard), and the application did not handle the <see cref="WM_APPCOMMAND"/> message generated by that input. If the Shell procedure handles the <see cref="WM_COMMAND"/> message, it should not call <see cref="CallNextHookEx"/>.
            /// </summary>
            HSHELL_APPCOMMAND = 12,

            /// <summary>
            /// A top-level window is being replaced. The window exists when the system calls this hook.
            /// </summary>
            HSHELL_WINDOWREPLACED = 13,

            /// <summary>
            /// Similar to <see cref="HSHELL_WINDOWACTIVATED"/>
            /// </summary>
            HSHELL_RUDEAPPACTIVATED = 32772,
        }

        public enum ShellHookId : int
        {
            WH_SHELL = 0xa,
            WH_CBT = 0x5
        }

        public enum SPI : uint
        {
            /// <summary>
            /// Sets the size of the work area. The work area is the portion of the screen not obscured by the system taskbar or by application desktop toolbars. The pvParam parameter is a pointer to a <see cref="WinDef.RECT"/> structure that specifies the new work area rectangle, expressed in virtual screen coordinates. In a system with multiple display monitors, the function sets the work area of the monitor that contains the specified rectangle.
            /// </summary>
            SPI_SETWORKAREA = 0x002F
        }

        public enum SPIF : uint
        {
            None = 0x00,

            /// <summary>
            /// Writes the new system-wide parameter setting to the user profile.
            /// </summary>
            SPIF_UPDATEINIFILE = 0x01,

            /// <summary>
            /// Broadcasts the <see cref="WM_SETTINGCHANGE"/> message after updating the user profile.
            /// </summary>
            SPIF_SENDCHANGE = 0x02,

            /// <summary>
            /// Same as <see cref="SPIF_SENDCHANGE"/>.
            /// </summary>
            SPIF_SENDWININICHANGE = 0x02
        }
    }
}
